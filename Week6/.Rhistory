results %>% filter(model="RF") %>% select(Prediction)
results %>% filter(model=="RF") %>% select(Prediction)
RF = as.number(as.character(results %>% filter(model=="RF") %>% select(Prediction)))
RF = results %>% filter(model=="RF") %>% select(Prediction)
RF = as.numeric(as.character(results %>% filter(model=="RF") %>% select(Prediction)))
RF = results %>% filter(model=="RF") %>% select(Prediction)
RF = as.numeric(as.character(RF))
summary(RF)
RF = results %>% filter(model=="RF") %>% select(Prediction)
RF = as.numeric(RF)
factorToNum = function(factor){as.numeric(as.character(factor))}
RF = results %>% filter(model=="RF") %>% select(Prediction)
RF = factorToNum(RF)
summary(RF)
RF = results %>% filter(model=="RF") %>% select(Prediction)
summary(RF)
SVM = results %>% filter(model=="SVM") %>% select(Prediction)
RF + SVM
summary(RF)
str(RF)
str(as.character(RF))
str(as.data.frame(as.character(RF)))
str(as.numeric(as.data.frame(as.character(RF))))
factorToNum(RF)
factorToNum(RF[1])
RF[1]
RF[,1]
factorToNum(RF[,1])
summary(factorToNum(RF[,1]))
Test = results %>% filter(model=="RF") %>% select(label)
table(factorToNum(Test[,1],predictEnsemble)
)
Test = results %>% filter(model=="RF") %>% select(label)
table(Test,predictEnsemble)
predictEnsemble = (factorToNum(RF[,1]) + factorToNum(SVM[,1]))/2
table(Test,predictEnsemble)
head(predictEnsemble)
head(RF)
head(SVM)
head(Test)
RF = results %>% filter(model=="RF") %>% select(Prediction)
SVM = results %>% filter(model=="SVM") %>% select(Prediction)
CART = results %>% filter(model=="CART") %>% select(Prediction)
CTree = results %>% filter(model=="CTree") %>% select(Prediction)
GLM = results %>% filter(model=="GLM") %>% select(Prediction)
NB = results %>% filter(model=="NB") %>% select(Prediction)
head(NB)
head(GLM)
head(CTree)
head(CART)
str(predictEnsemble)
Label = results %>% filter(model=="RF") %>% select(label)
str(Label)
Label = factorToNum(Label[,1])
str(Label)
table(Label,predictEnsemble)
predictEnsemble = ifelse((factorToNum(RF[,1]) + factorToNum(SVM[,1]))/2 >=.5 ,1,0)
table(Label,predictEnsemble)
cm = table(Label,predictEnsemble)
sum(diag(cm))/sum(cm)
table(Label,factorToNum(RF[,1]))
sum(diag(table(Label,factorToNum(RF[,1]))))/sum(table(Label,factorToNum(RF[,1])))
results %>%
group_by(model) %>%
summarise(accuracy = sum(label == Prediction) / n())
predictEnsemble = ifelse((factorToNum(RF[,1]) + factorToNum(SVM[,1]) + factorToNum(CART[,1]) )/3
>=.5 ,1,0)
cm = table(Label,predictEnsemble)
sum(diag(cm))/sum(cm)
predictEnsemble = ifelse((factorToNum(RF[,1]) + factorToNum(SVM[,1]) + *2factorToNum(CART[,1]) )/4
>=.5 ,1,0)
cm = table(Label,predictEnsemble)
sum(diag(cm))/sum(cm)
predictEnsemble = ifelse((factorToNum(RF[,1]) + factorToNum(SVM[,1]) + 2*factorToNum(CART[,1]) )/4
>=.5 ,1,0)
cm = table(Label,predictEnsemble)
sum(diag(cm))/sum(cm)
predictEnsemble = ifelse((factorToNum(RF[,1]) + factorToNum(SVM[,1]) + 3*factorToNum(CART[,1]) )/5
>=.5 ,1,0)
cm = table(Label,predictEnsemble)
sum(diag(cm))/sum(cm)
predictEnsemble = ifelse((factorToNum(RF[,1]) + factorToNum(SVM[,1]) + 4*factorToNum(CART[,1]) )/6
>=.5 ,1,0)
cm = table(Label,predictEnsemble)
sum(diag(cm))/sum(cm)
predictEnsemble = ifelse((factorToNum(RF[,1]) + factorToNum(SVM[,1]) + factorToNum(CART[,1]) +
factorToNum(CTree[,1]))/4
>=.5 ,1,0)
cm = table(Label,predictEnsemble)
sum(diag(cm))/sum(cm)
predictEnsemble = ifelse((factorToNum(RF[,1]) + factorToNum(SVM[,1]) + factorToNum(CART[,1]) +
2*factorToNum(CTree[,1]))/5
>=.5 ,1,0)
cm = table(Label,predictEnsemble)
sum(diag(cm))/sum(cm)
predictEnsemble = ifelse((factorToNum(RF[,1]) + factorToNum(SVM[,1]) + factorToNum(CART[,1]) +
factorToNum(CTree[,1]) + factorToNum(GLM[,1])    )/5
>=.5 ,1,0)
cm = table(Label,predictEnsemble)
sum(diag(cm))/sum(cm)
predictEnsemble = ifelse((factorToNum(RF[,1]) + factorToNum(SVM[,1]) + 2*factorToNum(CART[,1]) +
factorToNum(CTree[,1]) + 2*factorToNum(GLM[,1])    )/7
>=.5 ,1,0)
cm = table(Label,predictEnsemble)
sum(diag(cm))/sum(cm)
predictEnsemble = ifelse((factorToNum(RF[,1]) + factorToNum(SVM[,1]) + 3*factorToNum(CART[,1]) +
factorToNum(CTree[,1]) + 2*factorToNum(GLM[,1])    )/7
>=.5 ,1,0)
cm = table(Label,predictEnsemble)
sum(diag(cm))/sum(cm)
predictEnsemble = ifelse((factorToNum(RF[,1]) + factorToNum(SVM[,1]) + 3*factorToNum(CART[,1]) +
factorToNum(CTree[,1]) + 2*factorToNum(GLM[,1])    )/8
>=.5 ,1,0)
cm = table(Label,predictEnsemble)
sum(diag(cm))/sum(cm)
predictEnsemble = ifelse((factorToNum(RF[,1]) + factorToNum(SVM[,1]) + 3*factorToNum(CART[,1]) +
factorToNum(CTree[,1]) + 2*factorToNum(GLM[,1])    )/8
>=.5 ,1,0)
cm = table(Label,predictEnsemble)
sum(diag(cm))/sum(cm)
predictEnsemble = ifelse((2*factorToNum(RF[,1]) + factorToNum(SVM[,1]) + 3*factorToNum(CART[,1]) +
factorToNum(CTree[,1]) + 2*factorToNum(GLM[,1])    )/9
>=.5 ,1,0)
cm = table(Label,predictEnsemble)
sum(diag(cm))/sum(cm)
predictEnsemble = ifelse((3*factorToNum(RF[,1]) + factorToNum(SVM[,1]) + 3*factorToNum(CART[,1]) +
factorToNum(CTree[,1]) + 2*factorToNum(GLM[,1])    )/10
>=.5 ,1,0)
cm = table(Label,predictEnsemble)
sum(diag(cm))/sum(cm)
predictEnsemble = ifelse((factorToNum(RF[,1]) + factorToNum(SVM[,1]) + 3*factorToNum(CART[,1]) +
factorToNum(CTree[,1]) + factorToNum(GLM[,1])    )/7
>=.5 ,1,0)
cm = table(Label,predictEnsemble)
sum(diag(cm))/sum(cm)
predictEnsemble = ifelse((factorToNum(RF[,1]) + factorToNum(SVM[,1]) + 4*factorToNum(CART[,1]) +
factorToNum(CTree[,1]) + factorToNum(GLM[,1])    )/8
>=.5 ,1,0)
cm = table(Label,predictEnsemble)
sum(diag(cm))/sum(cm)
predictEnsemble = ifelse((factorToNum(RF[,1]) + factorToNum(SVM[,1]) + 5*factorToNum(CART[,1]) +
factorToNum(CTree[,1]) + factorToNum(GLM[,1])    )/5
>=.5 ,1,0)
cm = table(Label,predictEnsemble)
sum(diag(cm))/sum(cm)
predictEnsemble = ifelse((factorToNum(RF[,1]) + 2*factorToNum(SVM[,1]) + factorToNum(CART[,1]) +
factorToNum(CTree[,1]) + factorToNum(GLM[,1])    )/6
>=.5 ,1,0)
cm = table(Label,predictEnsemble)
sum(diag(cm))/sum(cm)
predictEnsemble = ifelse((factorToNum(RF[,1]) + 3*factorToNum(SVM[,1]) + factorToNum(CART[,1]) +
factorToNum(CTree[,1]) + factorToNum(GLM[,1])    )/7
>=.5 ,1,0)
cm = table(Label,predictEnsemble)
sum(diag(cm))/sum(cm)
predictEnsemble = ifelse((factorToNum(RF[,1]) + factorToNum(SVM[,1]) + factorToNum(CART[,1]) +
factorToNum(CTree[,1]) + factorToNum(GLM[,1]) + factorToNum(NB[,1]) )/6
>=.5 ,1,0)
cm = table(Label,predictEnsemble)
sum(diag(cm))/sum(cm)
predictEnsemble = ifelse((factorToNum(RF[,1]) + factorToNum(SVM[,1]) + 2*factorToNum(CART[,1]) +
factorToNum(CTree[,1]) + factorToNum(GLM[,1]) + 2*factorToNum(NB[,1]) )/8
>=.5 ,1,0)
cm = table(Label,predictEnsemble)
sum(diag(cm))/sum(cm)
predictEnsemble = ifelse((factorToNum(RF[,1]) + factorToNum(SVM[,1]) + 4*factorToNum(CART[,1]) +
factorToNum(CTree[,1]) + factorToNum(GLM[,1]) + 2*factorToNum(NB[,1]) )/10
>=.5 ,1,0)
cm = table(Label,predictEnsemble)
sum(diag(cm))/sum(cm)
predictEnsemble = ifelse((factorToNum(RF[,1]) + factorToNum(SVM[,1]) + 4*factorToNum(CART[,1]) +
factorToNum(CTree[,1]) + factorToNum(GLM[,1]) + 3*factorToNum(NB[,1]) )/11
>=.5 ,1,0)
cm = table(Label,predictEnsemble)
sum(diag(cm))/sum(cm)
predictEnsemble = ifelse((factorToNum(RF[,1]) + 2*factorToNum(SVM[,1]) + 4*factorToNum(CART[,1]) +
factorToNum(CTree[,1]) + factorToNum(GLM[,1]) + 3*factorToNum(NB[,1]) )/12
>=.5 ,1,0)
cm = table(Label,predictEnsemble)
sum(diag(cm))/sum(cm)
predictEnsemble = ifelse((factorToNum(RF[,1]) + factorToNum(SVM[,1]) + 4*factorToNum(CART[,1]) +
factorToNum(CTree[,1]) + factorToNum(GLM[,1]) + 2*factorToNum(NB[,1]) )/10
>=.5 ,1,0)
cm = table(Label,predictEnsemble)
sum(diag(cm))/sum(cm)
predictEnsemble = ifelse((factorToNum(RF[,1]) + factorToNum(SVM[,1]) + 4*factorToNum(CART[,1]) +
factorToNum(CTree[,1]) + factorToNum(GLM[,1]) + 2*factorToNum(NB[,1]) )/10
>=.5 ,1,0)
cm = table(Label,predictEnsemble)
sum(diag(cm))/sum(cm)
predictEnsemble = ifelse((factorToNum(RF[,1]) + factorToNum(SVM[,1]) + 5*factorToNum(CART[,1]) +
factorToNum(CTree[,1]) + factorToNum(GLM[,1]) + 2*factorToNum(NB[,1]) )/11
>=.5 ,1,0)
cm = table(Label,predictEnsemble)
sum(diag(cm))/sum(cm)
predictEnsemble = ifelse((factorToNum(RF[,1]) + factorToNum(SVM[,1]) + 6*factorToNum(CART[,1]) +
factorToNum(CTree[,1]) + factorToNum(GLM[,1]) + 2*factorToNum(NB[,1]) )/12
>=.5 ,1,0)
cm = table(Label,predictEnsemble)
sum(diag(cm))/sum(cm)
results.table
predictEnsemble = ifelse((factorToNum(RF[,1]) + 0*factorToNum(SVM[,1]) + factorToNum(CART[,1]) +
0*factorToNum(CTree[,1]) + factorToNum(GLM[,1]) + factorToNum(NB[,1]) )/4
>=.5 ,1,0)
cm = table(Label,predictEnsemble)
sum(diag(cm))/sum(cm)
predictEnsemble = ifelse((factorToNum(RF[,1]) + 0*factorToNum(SVM[,1]) + factorToNum(CART[,1]) +
0*factorToNum(CTree[,1]) + factorToNum(GLM[,1]) + 0*factorToNum(NB[,1]) )/4
>=.5 ,1,0)
cm = table(Label,predictEnsemble)
sum(diag(cm))/sum(cm)
predictEnsemble = ifelse((factorToNum(RF[,1]) + 0*factorToNum(SVM[,1]) + factorToNum(CART[,1]) +
0*factorToNum(CTree[,1]) + 0*factorToNum(GLM[,1]) + factorToNum(NB[,1]) )/4
>=.5 ,1,0)
cm = table(Label,predictEnsemble)
sum(diag(cm))/sum(cm)
predictEnsemble = ifelse((factorToNum(RF[,1]) + 0*factorToNum(SVM[,1]) + 2*factorToNum(CART[,1]) +
0*factorToNum(CTree[,1]) + 0*factorToNum(GLM[,1]) + factorToNum(NB[,1]) )/5
>=.5 ,1,0)
cm = table(Label,predictEnsemble)
sum(diag(cm))/sum(cm)
predictEnsemble = ifelse((factorToNum(RF[,1]) + 0*factorToNum(SVM[,1]) + 3*factorToNum(CART[,1]) +
0*factorToNum(CTree[,1]) + 0*factorToNum(GLM[,1]) + factorToNum(NB[,1]) )/6
>=.5 ,1,0)
cm = table(Label,predictEnsemble)
sum(diag(cm))/sum(cm)
predictEnsemble = ifelse((factorToNum(RF[,1]) + 0*factorToNum(SVM[,1]) + 2*factorToNum(CART[,1]) +
0*factorToNum(CTree[,1]) + factorToNum(GLM[,1]) + 2*factorToNum(NB[,1]) )/6
>=.5 ,1,0)
cm = table(Label,predictEnsemble)
sum(diag(cm))/sum(cm)
predictEnsemble = ifelse((factorToNum(RF[,1]) + 0*factorToNum(SVM[,1]) + 3*factorToNum(CART[,1]) +
0*factorToNum(CTree[,1]) + factorToNum(GLM[,1]) + 3*factorToNum(NB[,1]) )/8
>=.5 ,1,0)
cm = table(Label,predictEnsemble)
sum(diag(cm))/sum(cm)
predictEnsemble = ifelse((factorToNum(RF[,1]) + 0*factorToNum(SVM[,1]) + 3*factorToNum(CART[,1]) +
0*factorToNum(CTree[,1]) + factorToNum(GLM[,1]) + factorToNum(NB[,1]) )/5
>=.5 ,1,0)
cm = table(Label,predictEnsemble)
sum(diag(cm))/sum(cm)
predictEnsemble = ifelse((factorToNum(RF[,1]) + 0*factorToNum(SVM[,1]) + 2*factorToNum(CART[,1]) +
0*factorToNum(CTree[,1]) + factorToNum(GLM[,1]) + 2*factorToNum(NB[,1]) )/5
>=.5 ,1,0)
cm = table(Label,predictEnsemble)
sum(diag(cm))/sum(cm)
predictEnsemble = ifelse((factorToNum(RF[,1]) + 0*factorToNum(SVM[,1]) + 2*factorToNum(CART[,1]) +
0*factorToNum(CTree[,1]) + 3*factorToNum(GLM[,1]) + 2*factorToNum(NB[,1]) )/7
>=.5 ,1,0)
cm = table(Label,predictEnsemble)
sum(diag(cm))/sum(cm)
predictEnsemble = ifelse((factorToNum(RF[,1]) + 0*factorToNum(SVM[,1]) + 2*factorToNum(CART[,1]) +
0*factorToNum(CTree[,1]) + 2*factorToNum(GLM[,1]) + 2*factorToNum(NB[,1]) )/6
>=.5 ,1,0)
cm = table(Label,predictEnsemble)
sum(diag(cm))/sum(cm)
predictEnsemble = ifelse((factorToNum(RF[,1]) + 0*factorToNum(SVM[,1]) + 2*factorToNum(CART[,1]) +
0*factorToNum(CTree[,1]) + factorToNum(GLM[,1]) + 2*factorToNum(NB[,1]) )/6
>=.5 ,1,0)
cm = table(Label,predictEnsemble)
sum(diag(cm))/sum(cm)
predictEnsemble = ifelse((factorToNum(RF[,1]) + 0*factorToNum(SVM[,1]) + 4*factorToNum(CART[,1]) +
0*factorToNum(CTree[,1]) + factorToNum(GLM[,1]) + 2*factorToNum(NB[,1]) )/8
>=.5 ,1,0)
cm = table(Label,predictEnsemble)
sum(diag(cm))/sum(cm)
predictEnsemble = ifelse((factorToNum(RF[,1]) + 0*factorToNum(SVM[,1]) + 2*factorToNum(CART[,1]) +
0*factorToNum(CTree[,1]) + factorToNum(GLM[,1]) + 4*factorToNum(NB[,1]) )/8
>=.5 ,1,0)
cm = table(Label,predictEnsemble)
sum(diag(cm))/sum(cm)
predictEnsemble = ifelse((factorToNum(RF[,1]) + 0*factorToNum(SVM[,1]) + 0*factorToNum(CART[,1]) +
factorToNum(CTree[,1]) + factorToNum(GLM[,1]) + 0*factorToNum(NB[,1]) )/3
>=.5 ,1,0)
d
d
cm = table(Label,predictEnsemble)
sum(diag(cm))/sum(cm)
predictEnsemble = ifelse((2*factorToNum(RF[,1]) + 0*factorToNum(SVM[,1]) + 0*factorToNum(CART[,1]) +
factorToNum(CTree[,1]) + factorToNum(GLM[,1]) + 0*factorToNum(NB[,1]) )/4
>=.5 ,1,0)
cm = table(Label,predictEnsemble)
sum(diag(cm))/sum(cm)
predictEnsemble = ifelse((factorToNum(RF[,1]) + 0*factorToNum(SVM[,1]) + 0*factorToNum(CART[,1]) +
factorToNum(CTree[,1]) + factorToNum(GLM[,1]) + 2*factorToNum(NB[,1]) )/5
>=.5 ,1,0)
cm = table(Label,predictEnsemble)
sum(diag(cm))/sum(cm)
predictEnsemble = ifelse((2*factorToNum(RF[,1]) + 0*factorToNum(SVM[,1]) + 0*factorToNum(CART[,1]) +
factorToNum(CTree[,1]) + factorToNum(GLM[,1]) + 2*factorToNum(NB[,1]) )/6
>=.5 ,1,0)
cm = table(Label,predictEnsemble)
sum(diag(cm))/sum(cm)
predictEnsemble = ifelse((2*factorToNum(RF[,1]) + 0*factorToNum(SVM[,1]) + 1*factorToNum(CART[,1]) +
factorToNum(CTree[,1]) + factorToNum(GLM[,1]) + 2*factorToNum(NB[,1]) )/7
>=.5 ,1,0)
cm = table(Label,predictEnsemble)
sum(diag(cm))/sum(cm)
predictEnsemble = ifelse((2*factorToNum(RF[,1]) + 0*factorToNum(SVM[,1]) + 2*factorToNum(CART[,1]) +
factorToNum(CTree[,1]) + factorToNum(GLM[,1]) + 2*factorToNum(NB[,1]) )/8
>=.5 ,1,0)
cm = table(Label,predictEnsemble)
sum(diag(cm))/sum(cm)
predictEnsemble = ifelse((2*factorToNum(RF[,1]) + 0*factorToNum(SVM[,1]) + 2*factorToNum(CART[,1]) +
0*factorToNum(CTree[,1]) + factorToNum(GLM[,1]) + 2*factorToNum(NB[,1]) )/8
>=.5 ,1,0)
predictEnsemble = ifelse((2*factorToNum(RF[,1]) + 0*factorToNum(SVM[,1]) + 2*factorToNum(CART[,1]) +
0*factorToNum(CTree[,1]) + factorToNum(GLM[,1]) + 2*factorToNum(NB[,1]) )/7
>=.5 ,1,0)
cm = table(Label,predictEnsemble)
sum(diag(cm))/sum(cm)
predictEnsemble = ifelse((2*factorToNum(RF[,1]) + 0*factorToNum(SVM[,1]) + 3*factorToNum(CART[,1]) +
0*factorToNum(CTree[,1]) + factorToNum(GLM[,1]) + 2*factorToNum(NB[,1]) )/8
>=.5 ,1,0)
cm = table(Label,predictEnsemble)
sum(diag(cm))/sum(cm)
predictEnsemble = ifelse((factorToNum(RF[,1]) + 0*factorToNum(SVM[,1]) + factorToNum(CART[,1]) +
0*factorToNum(CTree[,1]) + 2*factorToNum(GLM[,1]) + 2*factorToNum(NB[,1]) )/6
>=.5 ,1,0)
cm = table(Label,predictEnsemble)
sum(diag(cm))/sum(cm)
cm = table(Label,factorToNum(CART[,1]))
sum(diag(cm))/sum(cm)
head(df)
str(df)
# Ensure results are repeatable
set.seed(7)
# load the library
library(mlbench)
library(caret)
# prepare training scheme
control <- trainControl(method="repeatedcv", number=6, repeats=2)
# train the model
model <- train(as.factor(label) ~ dist_author + dist_initials + dist_title + dist_year + dist_coauthor +
dist_keyword  + dist_journal + dist_institution,
data=df, method="lvq", preProcess="scale", trControl=control)
# Estimate variable importance
importance <- varImp(model, scale=FALSE)
# Summarize importance
print(importance)
# Plot importance
plot(importance)
setwd("/Users/saulgarcia/Desktop/Github/MIT_Analytics_Edge/Week6")
stocks <- read.csv("StocksCluster.csv")
str(stocks)
nrow(stocks)
table(stocks)
head(stocks)
table(stocks$PositiveDec)
table(stocks$PositiveDec)[2]/nrow(stocks)
cor(stocks[,1:11])
max(cor(stocks[,1:11]))
tapply(stocks[,1:11],2,mean)
tapply(stocks[,1:11],1,mean)
apply(stocks[,1:11],1,mean)
summary(stocks)
summary(stocks)$Max
set.seed(144)
library(caTools)
spl = sample.split(stocks$PositiveDec, SplitRatio = 0.7)
stocksTrain = subset(stocks, spl == TRUE)
stocksTest = subset(stocks, spl == FALSE)
set.seed(144)
spl = sample.split(stocks$PositiveDec, SplitRatio = 0.7)
stocksTrain = subset(stocks, spl == TRUE)
stocksTest = subset(stocks, spl == FALSE)
StocksModel = glm(PositiveDec~., family="binomial")
StocksModel = glm(PositiveDec~., data=stocksTrain,family="binomial")
prediction = predict(StocksModel >=.5)
prediction = predict(StocksModel)
table(stocksTrain, prediction >= .5)
table(stocksTrain, prediction)
prediction = predict(StocksModel)
table(stocksTrain, prediction)
prediction = predict(StocksModel, type="response")
table(stocksTrain, prediction)
prediction = predict(StocksModel, type="response")
table(stocksTrain, prediction)
StocksModel = glm(PositiveDec~., data=stocksTrain,family=binomial)
prediction = predict(StocksModel, type="response")
table(stocksTrain, prediction)
prediction = predict(StocksModel)
table(stocksTrain, prediction)
StocksModel = glm(PositiveDec~., data=stocksTrain,family=binomial)
prediction = predict(StocksModel)
prediction
fit.results = ifelse(prediction>.5,1,0)
table(stocksTrain, fit.results)
StocksModel = glm(PositiveDec~., data=stocksTrain,family=binomial)
prediction = predict(StocksModel,type='response')
fit.results = ifelse(prediction>.5,1,0)
table(stocksTrain, fit.results)
fit.results
prediction = predict(StocksModel,stocksTrain)
table(stocksTrain, prediction>.5)
prediction = predict(StocksModel,stocksTrain)
prediction
fit.results = ifelse(prediction>.5,1,0)
fit.results
table(stocksTrain$PositiveDec,fit.results )
acc= sum(diag(cm)/sum(cm))
acc
prediction = predict(StocksModel)
fit.results = ifelse(prediction>=.5,1,0)
cm=table(stocksTrain$PositiveDec,fit.results )
acc= sum(diag(cm)/sum(cm))
acc
StocksModel = glm(PositiveDec ~ ., data=stocksTrain,family=binomial)
prediction = predict(StocksModel, type="response")
fit.results = ifelse(prediction>=.5,1,0)
cm=table(stocksTrain$PositiveDec,fit.results )
acc= sum(diag(cm)/sum(cm))
acc
fit.results = ifelse(prediction>.5,1,0)
cm=table(stocksTrain$PositiveDec,fit.results )
acc= sum(diag(cm)/sum(cm))
acc
prediction = predict(StocksModel, stockTest type="response")
fit.results = ifelse(prediction>.5,1,0)
cm=table(stocksTest$PositiveDec,fit.results )
acc= sum(diag(cm)/sum(cm))
acc
prediction = predict(StocksModel, stockTest, type="response")
prediction = predict(StocksModel, stocksTest, type="response")
fit.results = ifelse(prediction >.5,1,0)
cm=table(stocksTest$PositiveDec,fit.results )
acc= sum(diag(cm)/sum(cm))
acc
table(stocksTest$PositiveDec)
table(stocksTest$PositiveDec)[2]/nrow(stocksTest)
limitedTrain = stocksTrain
limitedTrain$PositiveDec = NULL
limitedTest = stocksTest
limitedTest$PositiveDec = NULL
library(caret)
preproc = preProcess(limitedTrain)
normTrain = predict(preproc, limitedTrain)
normTest = predict(preproc, limitedTest)
summary(normTrain)
summary(normTest)
set.seed(144)
km = kmeans(normTrain, 3)
table(km$cluster)
which.max(table(km$cluster))
library(flexclust)
km.kcca = as.kcca(km, normTrain)
clusterTrain = predict(km.kcca)
clusterTest = predict(km.kcca, newdata=normTest)
table(clusterTest)
stocksTrain1 = subset(stocksTrain, clusterTrain == 1)
stocksTrain2 = subset(stocksTrain, clusterTrain == 2)
stocksTrain3 = subset(stocksTrain, clusterTrain == 3)
max(stocksTrain1$PositiveDec)
max(stocksTrain2$PositiveDec)
max(stocksTrain3$PositiveDec)
mean(stocksTrain1$PositiveDec)
mean(stocksTrain2$PositiveDec)
mean(stocksTrain3$PositiveDec)
StocksModel1 = glm(PositiveDec ~ ., data=stocksTrain1,family=binomial)
StocksModel2 = glm(PositiveDec ~ ., data=stocksTrain2,family=binomial)
StocksModel3 = glm(PositiveDec ~ ., data=stocksTrain3,family=binomial)
summary(StocksModel1)
summary(StocksModel2)
summary(StocksModel3)
stocksTest1 = subset(stocksTest, clusterTrain == 1)
stocksTest2 = subset(stocksTest, clusterTrain == 2)
stocksTest3 = subset(stocksTest, clusterTrain == 3)
table(stocksTest$PositiveDec, predict1 >.5)
predict1 = predict(StocksModel1, stocksTest1, type="response")
predict2 = predict(StocksModel2, stocksTest2, type="response")
predict3 = predict(StocksModel3, stocksTest3, type="response")
table(stocksTest$PositiveDec, predict1 >.5)
table(stocksTest$PositiveDec, predict1 >.5)
table(stocksTest$PositiveDec, predict1)
predict1
stocksTest1
stocksTest1
predict1 = predict(StocksModel1, stocksTest1, type="response")
predict1
predict(StocksModel1, stocksTest1, type="response")
predict2 = predict(StocksModel2, stocksTest2, type="response")
predict3 = predict(StocksModel3, stocksTest3, type="response")
predict2
predict3
stocksTest1 = subset(stocksTest, clusterTest == 1)
stocksTest2 = subset(stocksTest, clusterTest == 2)
stocksTest3 = subset(stocksTest, clusterTest == 3)
predict1 = predict(StocksModel1, stocksTest1, type="response")
predict2 = predict(StocksModel2, stocksTest2, type="response")
predict3 = predict(StocksModel3, stocksTest3, type="response")
table(stocksTest$PositiveDec, predict1)
predict1
table(stocksTest1$PositiveDec, predict1)
table(stocksTest1$PositiveDec, predict1>.5)
sum(diag(table(stocksTest1$PositiveDec, predict1>.5)))/sum(nrow(stocksTest1))
sum(diag(table(stocksTest2$PositiveDec, predict2>.5)))/sum(nrow(stocksTest2))
sum(diag(table(stocksTest3$PositiveDec, predict3>.5)))/sum(nrow(stocksTest3))
AllPredictions = c(PredictTest1, PredictTest2, PredictTest3)
AllPredictions = c(predict1, predict2,predict3)
AllOutcomes = c(stocksTest1$PositiveDec, stocksTest2$PositiveDec, stocksTest3$PositiveDec)
accuracy = sum(diag(table(AllOutcomes$PositiveDec, AllPredictions>.5)))/sum(nrow(AllOutcomes))
AllOutcomes$PositiveDec
accuracy = sum(diag(table(AllOutcomes, AllPredictions>.5)))/sum(nrow(AllOutcomes))
accuracy
AllOutcomes
AllPredictions
AllPredictions>.5
sum(nrow(AllOutcomes)
)
length(AllOutcomes)
accuracy = sum(diag(table(AllOutcomes, AllPredictions>.5)))/length(AllOutcomes)
accuracy
