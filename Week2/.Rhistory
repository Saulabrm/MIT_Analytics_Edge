sd(homes)
?apply
(homes-350)^2
sum((homes-350)^2)
sum((homes-350)^2)/8
sqrt(sum((homes-350)^2)/8)
sqrt(sum((homes-350)^2)/9)
sqrt(sum((homes-350)^2)/8)
z_normal(.333)
sd(homes)
Z= (mean(homes)-350)/(sd(homes)/sqrt(9))
Z
mean(homes)
sd(homes)/3
3.8/sd(homes/3)
z_normal(.5217917)
library(ISLR)
summary(Hitters)
Hitters=na.omit(Hitters)
with(Hitters, sum(is.na(Salary)))
summary(Salary)
library(leaps)
install.packages("leaps")
regfit.full= regsubsets(Salary~., data= Hitters)
summary(regfit.full)
library(leaps)
regfit.full= regsubsets(Salary~., data= Hitters)
summary(regfit.full)
regfut.full= regsubsets(Salary~.,data=Hitters, nvmax= 19)
reg.summary= summary(regfit.full)
reg.summary
names(reg.summary)
plot(reg.summary$cp, xlab="Number of variables", ylab="Cp")
which.min(reg.summary$cp)
points(10,reg.summary$cp[10,pch=20,col="red"])
points(10,reg.summary$cp[10],pch=20,col="red")
regfut.full= regsubsets(Salary~.,data=Hitters, nvmax= 19)
regfit.full= regsubsets(Salary~.,data=Hitters, nvmax= 19)
reg.summary= summary(regfit.full)
reg.summary
names(reg.summary)
plot(reg.summary$cp, xlab="Number of variables", ylab="Cp")
which.min(reg.summary$cp)
points(10,reg.summary$cp[10],pch=20,col="red")
plot(regfit.full, scale="Cp")
coef(regfit.full, 10)
dim(Hitters)
set.seed(1)
train=sample(seq(263), 180, replace=FALSE)
train
regfit.fwd= regsubsets(Salary~., data=Hitters[trains,], nvmax=19, method="forward")
regfit.fwd = regsubsets(Salary~., data=Hitters[-trains,], nvmax=19, method="forward")
val.errors=rep(NA,19)
x.text=model.matrix(Salary~.,data=Hitters[-train,]) # notice the -index
for(i in 1:19){
coefi=coef(regfit.fwd, id=i)
pred= x.test[,names(coefi)]%*%coefi
val.errors[i]= mean((Hitters$Salary[-train]-pred)^2)
}
dim(Hitters)
dim(Hitters)
set.seed(1)
train=sample(seq(263), 180, replace=FALSE)
train
regfit.fwd = regsubsets(Salary~., data=Hitters[-trains,], nvmax=19, method="forward")
regfit.fwd = regsubsets(Salary~., data=Hitters[train,], nvmax=19, method="forward")
val.errors=rep(NA,19)
x.text=model.matrix(Salary~.,data=Hitters[-train,]) # notice the -index
for(i in 1:19){
coefi=coef(regfit.fwd, id=i)
pred= x.test[,names(coefi)]%*%coefi
val.errors[i]= mean((Hitters$Salary[-train]-pred)^2)
}
plot(sqrt(val.errors), ylab="Root MSE", ylim = c(300,400), pch=19, type= "b")
points(sqrt(regfit.fwd$rss[-1]/180), col="blue", pch=19, type= "b")
legend("topright", legend=c("Training","Validation"), col=c("blue","black"), pch=19)
plot(sqrt(val.errors), ylab="Root MSE", ylim = c(300,400), pch=19, type= "b")
points(sqrt(regfit.fwd$rss[-1]/180), col="blue", pch=19, type= "b")
legend("topright", legend=c("Training","Validation"), col=c("blue","black"), pch=19)
val.errors=rep(NA,19)
x.test =model.matrix(Salary~.,data=Hitters[-train,]) # notice the -index
for(i in 1:19){
coefi=coef(regfit.fwd, id=i)
pred= x.test[,names(coefi)]%*%coefi
val.errors[i]= mean((Hitters$Salary[-train]-pred)^2)
}
plot(sqrt(val.errors), ylab="Root MSE", ylim = c(300,400), pch=19, type= "b")
points(sqrt(regfit.fwd$rss[-1]/180), col="blue", pch=19, type= "b")
legend("topright", legend=c("Training","Validation"), col=c("blue","black"), pch=19)
seq(263)
val.errors
x.test
val.errors=(NA,2)
val.errors=(NA,3)
val.errors=rep(NA,3)
val.errors
val.errors=rep(NA,5)
val.errors
val.errors=rep(NA,19)
x.test = model.matrix(Salary~.,data=Hitters[-train,]) # notice the -index
coef(regfit.fwd, id=i)
x.test[,names(coefi)]%*%coefi
set.seed(11)
folds<-sample(rep(1:10, length=nrow(Hitters)))
folds
table(folds)
cv.error=matrix(NA,10,19)
for(k in 1:10){
best.fit= regsubsets(Salary~., data=Hitters[folds!=k,], nvmax=19, method="forward")
for(i in 1:19){
pred=predict(best.fit, Hitters[folds==k,], id=i)
cv.errors[k,i]=mean((Hitters$Salary[folds==k]-pred)^2)
}
}
library(glmnet)
install.packages("glmnet")
library(glmnet)
x=model.matrix(Salary~.-1,data=Hitters)
y=Hitter$Salary
y=Hitters$Salary
fit.ridge= glmnet(x,y,alpha=0)
plot(fit.ridge, xvar="lambda", label=TRUE)
cv.ridge=cv.glmnet(x,y,alpha=0)
plot(cv.ridge)
fit.lasso=glmnet(x,y)
plot(fit.lasso, var="lambda", label=TRUE)
cv.lasso= cv.glmnet(x,y)
fit.lasso=glmnet(x,y)
lasso.tr= glmnet(x[train,], y[train])
lasso.tr
pred = predict(lasso.tr, x[-train,])
dim(pred)
lam.best=lasso.tr$lambda[order(rmse)[1]]
rmse= sqrt(apply((y[-train]-pred)^2,2,mean))
plot(log(lasso.tr$lambda), rmse, type="b", xlab="Log(lambda)")
lam.best=lasso.tr$lambda[order(rmse)[1]]
lam.best
coef(lasso.tr, s=lam.best)
head(Hitters)
head(Hitters[-1])
head(Hitters[,-1])
?sample
dim(Hitters)
?apply
```{r}
library(glmnet)
x=model.matrix(Salary~.-1,data=Hitters)
y=Hitters$Salary
```
First we will fit a ridge-regression model. This is achieved by calling `glmnet` with `alpha=0` (see the helpfile). There is also a `cv.glmnet` function which will do the cross-validation for us.
```{r}
fit.ridge= glmnet(x,y,alpha=0)
plot(fit.ridge, xvar="lambda", label=TRUE)
cv.ridge=cv.glmnet(x,y,alpha=0)
plot(cv.ridge)
```
Now we fit a lasso model; for this we use the default `alpha=1`
```{r}
fit.lasso=glmnet(x,y)
plot(fit.lasso, var="lambda", label=TRUE)
#deviance is the r squared
plot(fit.lasso, var="dev", label=TRUE)
cv.lasso= cv.glmnet(x,y)
plot(cv.lasso)
coef(cv.lasso)
```
Suppose we want to use our earlier train/validation division to select the `lambda` for the lasso.
This is easy to do.
```{r}
lasso.tr= glmnet(x[train,], y[train])
lasso.tr
pred = predict(lasso.tr, x[-train,])
dim(pred)
rmse= sqrt(apply((y[-train]-pred)^2,2,mean))
plot(log(lasso.tr$lambda), rmse, type="b", xlab="Log(lambda)")
#Gets the index of the least lambda
lam.best=lasso.tr$lambda[order(rmse)[1]]
lam.best
coef(lasso.tr, s=lam.best)
names(cv.lasso)
coef(cv.lasso)
cv.lasso
require(ISLR)
require(tree)
attach(Carseats)
hist(Sales)
High= ifelse(Sales<=8, "No", "Yes")
Carseats=data.frame(Carseats, High)
Carseats
tree.carseats= tree(High~.-Sales, data=Carseats)
summary(tree.carseats)
plot(tree.carseats)
require(tree)
install.packages("tree")
require(tree)
tree.carseats<- tree(High~.-Sales, data=Carseats)
summary(tree.carseats)
plot(tree.carseats)
text(tree.carseats,pretty=0)
set.seed(1011)
train=sample(1:nrow(Carseats),250)
tree.carseats=tree(High~.-Sales, Carseats, subset=train)
plot(tree.carseats); text(tree.carseats,pretty=0)
tree.pred=predict(tree.carseats, Carseats[-train,], type="class")
with(Carseats[-train,] , table(tree.pred,High))
(72+33)/150
dim(Carseats)
dim(train)
sample(1:nrow(Carseats),250)
cv.carseats=cv.tree(tree.carseats, FUN= prune.misclass)
cv.carseats
plot(cv.carseats)
prune.carseats= prune.misclass(tree.carseats, best = 13)
plot(prune.carseats); text(prune.carseats,pretty=0)
tree.pred= predict(prune.carseats, Carseats[-train,], type="class")
cv.carseats=cv.tree(tree.carseats, FUN= prune.misclass)    # this does cross validation
cv.carseats
plot(tree.carseats); text(tree.carseats,pretty=0)
tree.pred=predict(tree.carseats, Carseats[-train,], type="class") #-train will leave our test observations, type="class" for labels
with(Carseats[-train,] , table(tree.pred,High))   #High is a column of Carseats, and we want the testing values
(72+33)/150  #Correct divided by all.
(72+32)/150
require(randomForest)
require(MASS)
set.seed(101)
dim(Boston)
train=sample(1:nrow(Boston),300)
?Boston
?detach(Carseats)
rf.boston=randomForest(medv~.,data=Boston, subset=train)
rf.boston
fit$mse
oob.err=double(13)
test.err=double(13)
for(mtry in 1:13){
fit= randomForest(medv~., data=Boston, subset=train, mtry=mtry, ntree=400)
oob.err[mtry]=fit$mse[400]
pred=predict(fit,Boston[-train,])
test.err[mtry]= with(Boston[-train,], mean((medv~pred)^2))
cat(mtry," ")
}
oob.err=double(13)
test.err=double(13)
for(mtry in 1:13){
fit= randomForest(medv~., data=Boston, subset=train, mtry=mtry, ntree=400)
oob.err[mtry]=fit$mse[400]
pred=predict(fit,Boston[-train,])
test.err[mtry]= with(Boston[-train,], mean((medv~pred)))
cat(mtry," ")
}
oob.err=double(13)
test.err=double(13)
for(mtry in 1:13){
fit= randomForest(medv~., data=Boston, subset=train, mtry=mtry, ntree=400)
oob.err[mtry]=fit$mse[400]
pred=predict(fit,Boston[-train,])
test.err[mtry]= with(Boston[-train,], mean((medv~pred)*(medv~pred)))
cat(mtry," ")
}
oob.err=double(13)
test.err=double(13)
for(mtry in 1:13){
fit= randomForest(medv~., data=Boston, subset=train, mtry=mtry, ntree=400)
oob.err[mtry]=fit$mse[400]
pred=predict(fit,Boston[-train,])
test.err[mtry]= with(Boston[-train,], mean((medv~pred)))
cat(mtry," ")
}
matplot(1:mtry,cbind(test.err, oob.err), pch=19, col=c("red","blue"), type="b",
ylab= "Mean Squared Error")
legend("topright",legend=c("OOB","Test"), pch=19, col=c("red","blue"))
matplot(1:mtry, cbind(test.err, oob.err), pch=19, col=c("red","blue"), type="b",
ylab= "Mean Squared Error")
legend("topright",legend=c("OOB","Test"), pch=19, col=c("red","blue"))
obb.err
oob.err
oob.err =double(13)
test.err =double(13)
for(mtry in 1 : 13){
fit=randomForest(medv~.,data=Boston,subset=train,mtry=mtry,ntree=400)
oob.err[mtry]=fit$mse[400]
pred=predict(fit,Boston[-train,])
test.err[mtry] = with(Boston[-train,],mean((medv~pred)*(medv~pred)))
cat(mtry," ")
}
matplot(1:mtry, cbind(test.err, oob.err), pch=19, col=c("red","blue"), type="b",
ylab= "Mean Squared Error")
legend("topright",legend=c("OOB","Test"), pch=19, col=c("red","blue"))
oob.err=double(13)
test.err=double(13)
for(mtry in 1:13){
fit= randomForest(medv~., data=Boston, subset=train, mtry=mtry, ntree=400)
oob.err[mtry]=fit$mse[400]
pred=predict(fit,Boston[-train,])
test.err[mtry]= with(Boston[-train,], mean((medv-pred)^2))
cat(mtry," ")
}
matplot(1:mtry, cbind(test.err, oob.err), pch=19, col=c("red","blue"), type="b",
ylab= "Mean Squared Error")
legend("topright",legend=c("OOB","Test"), pch=19, col=c("red","blue"))
require(gbm)
boost.boston=gbm(medv~., data=Boston[train,], distribution = "gaussian", n.trees=10000
, shrinkage=0.01, interaction.depth = 4)
summary(boost.boston)
plot(boost.boston, i="lstat")
plot(boost.boston, i="rm")
n.trees=seq(from=100, to=10000, by=100)
predmat= predict(boost.boston, newdata = Boston[-train], n.trees = n.trees)
dim(predmat)
predmat= predict(boost.boston, newdata = Boston[-train], n.trees = n.trees)
predmat = predict(boost.boston, newdata = Boston[-train], n.trees = n.trees)
predmat = predict(boost.boston, newdata = Boston[-train,], n.trees = n.trees)
dim(predmat)
berr=with(Boston[-train,],apply( (predmat-medv)^2,2,mean))
head(Boston)
n.trees=seq(from=100, to=10000, by=100)
predmat = predict(boost.boston, newdata = Boston[-train,], n.trees = n.trees)
dim(predmat)
berr=with(Boston[-train,],apply( (predmat-medv)^2,2,mean))
plot(n.trees, berr, pch=19, ylab="Mean Squared Error", xlab="# Trees", main= "Boosting Test Error")
abline(h=min(test.err),col="red")
install.packages("RMySQL")
library(RMySQL)
library(RMySQL)
library(RMySQL)
require(RMySQL)
install.packages("RMySQL")
library(RMySQL)
ucscDb <- dbConnect( MySQL(), user="root",
host= "127.0.0.1")
drv<- dbDriver("MySQL")
ucscDb <- dbConnect( drv, dbname="dmkm_articles",
host= "127.0.0.1", port=3306
user="root", pw="dmkm1234"
)
ucscDb <- dbConnect( drv, dbname="dmkm_articles",
host= "127.0.0.1", port=3306,
user="root", pw="dmkm1234"
)
ucscDb <- dbConnect( drv, dbname="dmkm_articles",
host= "127.0.0.1", port=3306,
user="root", pw="dmkm1234"
)
ucscDb <- dbConnect( drv, dbname="dmkm_articles",
host= "localhost", port=3306,
user="root", pw="dmkm1234"
)
ucscDb <- dbConnect( drv, dbname="dmkm_articles",
host= "localhost (/Applications/MAMP/tmp/mysql/mysql.sock)", port=3306,
user="root", pw="dmkm1234"
)
ucscDb <- dbConnect( drv, dbname="dmkm_articles",
host= "localhost (/Applications/MAMP/tmp/mysql/mysql.sock)", port=8889,
user="root", pw="dmkm1234"
)
ucscDb <- dbConnect( drv, dbname="dmkm_articles",
host= "127.0.0.1", port=3306,
user="root", pw="dmkm1234"
)
ucscDb <- dbConnect( drv, dbname="dmkm_articles",
host= "localhost", port=8889,
user="root", pw="dmkm1234"
)
drv<- dbDriver("MySQL")
ucscDb <- dbConnect( drv, dbname="dmkm_articles",
host= "localhost", port=8889,
user="root", pw="dmkm1234"
)
ucscDb <- dbConnect( MySQL(), dbname="dmkm_articles",
host= "localhost", port=8889,
user="root", pw="dmkm1234"
)
ucscDb <- dbConnect( MySQL(), dbname="dmkm_articles",
host= "localhost", port=8889,
user="root", pw="dmkm1234"
)
ucscDb <- dbConnect( MySQL(), dbname="dmkm_articles",
host= "127.0.0.1", port=8889,
user="root", pw="dmkm1234"
)
ucscDb <- dbConnect( MySQL(), dbname="dmkm_articles",
host= "127.0.0.1", port=8889,
user="root"
)
pw<- {"dmkm1234"}
ucscDb <- dbConnect( MySQL(), dbname="dmkm_articles",
host= "127.0.0.1", port=8889,
user="root", password=pw
)
result <- dbGetQuery(ucscDb, "show databases;"); dbDisconnect(ucscDb);
result
ucscDb <- dbConnect( MySQL(), dbname="dmkm_articles",
host= "127.0.0.1", port=8889,
user="root", password=pw
)
dbExistsTable(uscsDb, "articles")
dbListFields(dmkm_articles,"articles")
dbExistsTable(uscsDb)
dbDisconnect(ucscDb);
dbExistsTable(ucscDb,"articles")
ucscDb <- dbConnect( MySQL(), dbname="dmkm_articles",
host= "127.0.0.1", port=8889,
user="root", password=pw
)
dbExistsTable(ucscDb,"articles")
dbListFields(dmkm_articles,"articles")
articles_data<- dbReadTable(ucscDb,"articles_1")
dbDisconnect(ucscDb);
dbListTables(ucscDb)
ucscDb <- dbConnect( MySQL(), dbname="dmkm_articles",
host= "127.0.0.1", port=8889,
user="root", password=pw
)
dbListTables(ucscDb)
dbDisconnect(ucscDb);
head(articles_data)
dbListFields(ucscDb,"articles")
ucscDb <- dbConnect( MySQL(), dbname="dmkm_articles",
host= "127.0.0.1", port=8889,
user="root", password=pw
)
dbListFields(ucscDb,"articles")
dbListTables(ucscDb)
dbListFields(ucscDb,"articles_keywords_clean_sel")
dbGetQuery(ucscDb, "select count(*) from articles")
dbGetQuery(ucscDb, "select * from articles limit 10")
articles_only<-dbReadTable(ucscDb,"articles")
head(articles_only)
names(articles_only)
dbListTables(ucscDb)
dbListFields(ucscDb,"articles_keywords_clean_sel")
dbGetQuery(ucscDb, "select * from articles_keywords_clean_sel  limit 10")
library(dplyr)
library(dplyr)
names(articles_only)
articles_only %>% select(id, title)
articles_title<-articles_only %>% select(id, title)
head(articles_title)
install.packages("tm")
library("tm")
dim(articles_title)
articles_title[1,2]
articles_title[3,2]
str(articles_title)
for(j in nrow(articles_title))
{
articles_title[j,2] <- gsub('[[:punct:]]', " ", articles_title[j,2])
}
str(articles_title)
gsub('[[:punct:]]', " ", "Phase Diagram and Electrical Conductivity of the PrBr3-CsBr Binary System" "MIL-53(Fe): a good example to illustrate the power of powder diffraction in the field of MOFs")
gsub('[[:punct:]]', " ", "Phase Diagram and Electrical Conductivity of the PrBr3-CsBr Binary System" "MIL-53(Fe): a good example to illustrate the power of powder diffraction in the field of MOFs")
gsub("(", " ", "Phase Diagram and Electrical Conductivity of the PrBr3-CsBr Binary System" "MIL-53(Fe): a good example to illustrate the power of powder diffraction in the field of MOFs")
gsub("(", " ", Phase Diagram and Electrical Conductivity of the PrBr3-CsBr Binary System" "MIL-53(Fe): a good example to illustrate the power of powder diffraction in the field of MOFs)
for(j in nrow(articles_title))
{
articles_title[j,2] <- gsub("(", " ", articles_title[j,2])
}
for(j in nrow(articles_title))
{
articles_title[j,2] <- gsub("[[:punct:]]", " ", articles_title[j,2])
}
str(articles_title)
setwd("/Users/saulgarcia/Desktop/Github/MOOCs/MIT Analyticals Edge/Week2")
wine = read.csv("wine.csv")
str(wine)
summary(wine)
model1 = lm(Price~AGST, data=wine)
summary(model1)
model1$residuals
SSE = sum(model1$residuals)
SSE
SSE = sum(model1$residuals^2)
SSE
d
model2 = lm(Price~AGST + HarvestRain, data=wine)
summary(model2)
SSE= sum(model2$residuals^2)
SSE
model3= lm(Price~AGST + HarvestRain + WinterRain + Age + FrancePop, data = wine)
summary(model3)
SSE= sum(model3$residuals^2)
SSE
model4 = lm(Price ~ HarvestRain + WinterRain, data=wine)
summary(model4)
model4$coefficients
model4$coefficients[1]
model4$coefficients[2]
model4$residuals
model3= lm(Price~AGST + HarvestRain + WinterRain + Age, data = wine)
model4= lm(Price~AGST + HarvestRain + WinterRain + Age, data = wine)
summary(model4)
SSE= sum(model4$residuals^2)
SSE
modelQ = lm(Price ~ HarvestRain + WinterRain, data=wine)
summary(modelQ)
cor(wine$WinterRainCoef, wine$Price)
cor(wine$WinterRain, wine$Price)
cor(wine$Age, wine$FrancePop)
cor(wine)
model5 = lm(Price~ AGST + HarvestRain + WinterRain , data=wine)
summary(model5)
cor(wine$HarvestRain, wine$WinterRain)
summary(model4)
wineTest = read.csv("wine_test.csv")
str(wineTest)
predictTest = predict(model4, newdata = wineTest)
predictTest
SSE= sum((wineTest$Price - predictTest)^2)
SSE
SST = sum( (wineTest$Price - mean(wine$Price))^2)
1-SSE/SST
source('~/.active-rstudio-document')
